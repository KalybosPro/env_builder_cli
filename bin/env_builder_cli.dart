library;

import 'package:universal_io/io.dart';
import 'package:path/path.dart' as p;
import 'package:env_builder_cli/env_builder_cli.dart' as env_builder_cli;

const envPackageName = 'env';
const packagesFolderName = 'packages';

Future<void> main(List<String> args) async {
  final env_builder_cli.EnvBuilder envBuilder = env_builder_cli.EnvBuilderCli();
  if (args.isEmpty ||
      !(args.length == 1 && args[0].startsWith('--env-file='))) {
    envBuilder.printUsage();
    exit(1);
  }

  final envFilesArg = args.firstWhere((a) => a.startsWith('--env-file='));
  final envFilePaths = envFilesArg.substring('--env-file='.length).split(',');

  if (envFilePaths.isEmpty) {
    print(
      'Error: No environment files specified. Use --env-file=<file1>,<file2>,...',
    );
    exit(1);
  }

  // Validate all env files exist
  for (final envFilePath in envFilePaths) {
    final envFile = File(envFilePath);
    if (!envFile.existsSync()) {
      print('Error: Env file does not exist: $envFilePath');
      exit(1);
    }
  }

  final currentDir = Directory.current.path;

  // Ensure packages folder exists
  final packagesDir = Directory(p.join(currentDir, packagesFolderName));
  if (!packagesDir.existsSync()) {
    print('Creating packages directory...');
    try {
      packagesDir.createSync(recursive: true);
    } catch (e) {
      print('Error creating packages directory at ${packagesDir.path}: $e');
      exit(1);
    }
  }

  // Create or find env package directory
  final envPackageDir = Directory(p.join(packagesDir.path, envPackageName));
  if (!envPackageDir.existsSync()) {
    print('Creating env Flutter package...');
    final createResult = await envBuilder.flutterCommand([
      'create',
      '--template=package',
      envPackageName,
    ], path: packagesDir.path);
    if (createResult.exitCode != 0) {
      stderr.write(createResult.stderr);
      print('Failed to create Flutter package:');
      exit(1);
    }
  } else {
    print('Env package already exists at ${envPackageDir.path}');
  }

  // Copy each .env file into env package root
  for (final envFilePath in envFilePaths) {
    final envFile = File(envFilePath);
    final fileName = p.basename(envFilePath);
    final destinationEnvFile = File(p.join(envPackageDir.path, fileName));
    try {
      await envFile.copy(destinationEnvFile.path);
      print('Copied env file to ${destinationEnvFile.path}');
    } catch (e) {
      print('Error copying $envFilePath to ${destinationEnvFile.path}: $e');
      exit(1);
    }
  }

  // Create lib/src folder inside env package
  final srcDir = Directory(p.join(envPackageDir.path, 'lib', 'src'));
  if (!srcDir.existsSync()) {
    try {
      srcDir.createSync(recursive: true);
    } catch (e) {
      print('Error creating lib/src directory at ${srcDir.path}: $e');
      exit(1);
    }
  }

  // Generate env.*.dart files for each env file
  for (final envFilePath in envFilePaths) {
    final fileName = p.basename(envFilePath);
    final envDartFileName = envBuilder.generateEnvDartFileName(fileName);
    final envDartFilePath = p.join(srcDir.path, envDartFileName);
    final envDartFile = File(envDartFilePath);

    final envClassName = envBuilder.generateEnvClassName(fileName);
    final envFile = File(envFilePath);
    final envContent = envBuilder.generateEnvClassContent(
      fileName,
      envClassName,
      envFile,
    );
    try {
      envDartFile.writeAsStringSync(envContent);
      print('Generated $envDartFilePath');
    } catch (e) {
      print('Error writing Dart env file $envDartFilePath: $e');
      exit(1);
    }
  }

  // Generate lib/src/env.dart file to instantiate variables
  final envEnum = File(p.join(srcDir.path, 'enums.dart'));
  final enumFileContent = envBuilder.generateEnumClassContent(
    File(envFilePaths.first),
  );

  try {
    envEnum.writeAsStringSync(enumFileContent);
  } catch (e) {
    print('Error writing enums.dart file: $e');
    exit(1);
  }

  // Generate lib/env.dart file to export all env.*.dart files
  final libDir = Directory(p.join(envPackageDir.path, 'lib'));
  final envExportFile = File(p.join(libDir.path, 'env.dart'));
  final exports =
      '''
/// A very good package generated by Env Builder CLI for environment variables
library;

export 'src/config/app_flavor.dart';
export 'src/enums.dart';
${envFilePaths.map((filePath) {
        final suffix = envBuilder.envDartFileSuffix(p.basename(filePath));
        return envBuilder.fileExporter(suffix);
      }).join('\n')}
''';

  try {
    envExportFile.writeAsStringSync(exports);
    print('Generated ${envExportFile.path}');
  } catch (e) {
    print('Error writing env.dart export file: $e');
    exit(1);
  }

  // Generate lib/src/config/app_flavor.dart file
  final configDir = Directory(p.join(srcDir.path, 'config'));
  final appFlavorFile = File(p.join(configDir.path, 'app_flavor.dart'));
  final appFlavorContent = envBuilder.generateAppFlavorContent(envFilePaths);

  try {
    if (!configDir.existsSync()) {
      configDir.createSync(recursive: true);
    }

    appFlavorFile.writeAsStringSync(appFlavorContent);
  } catch (e) {
    print('Error writing app_flavor.dart file: $e');
    exit(1);
  }

  // Update test/env_test.dart file
  envBuilder.writeEnvTestFile(envPackageDir.path);

  // Create or update pubspec.yaml in env package
  final pubspecFile = File(p.join(envPackageDir.path, 'pubspec.yaml'));
  final gitIgnore = File(p.join(envPackageDir.path, '.gitignore'));
  try {
    envBuilder.updatePubspecYaml(pubspecFile, envPackageDir.path);
    await envBuilder.createGitignoreWithEnvEntries(path: gitIgnore.path);
  } catch (e) {
    print('Error updating env package pubspec.yaml: $e');
    exit(1);
  }

  // Update root pubspec.yaml to include env package as dependency
  final rootPubspecPath = p.join(currentDir, 'pubspec.yaml');
  try {
    envBuilder.updateRootPubspecWithEnvPackage(rootPubspecPath);
  } catch (e) {
    print('Error updating root project pubspec.yaml: $e');
    exit(1);
  }

  // Run flutter pub get in root project
  print('\nRunning flutter pub get in root project...');
  final pubGetResult = await envBuilder.flutterCommand(['pub', 'get']);
  if (pubGetResult.exitCode == 0) {
    print('flutter pub get succeeded in root project');
  } else {
    stderr.write(pubGetResult.stderr);
    print('flutter pub get failed');
    exit(1);
  }

  print('\nDone! Your env package is ready to use.');
  print("Import it in your app like:");
  print("import 'package:env/env.dart';\n");
}
