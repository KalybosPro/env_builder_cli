import 'core.dart';
import 'package:path/path.dart' as p;

/// Handles code generation for different file types
class CodeGenerator {
  /// Generates the part statement for generated files
  static String _generatePartStatement(String suffix) {
    if (suffix.isEmpty) {
      return '''part 'env.g.dart';''';
    } else {
      return '''part 'env.$suffix.g.dart';''';
    }
  }

  /// Generates export statement for the package
  static String generateFileExporter(String suffix) {
    if (suffix.isEmpty) {
      return "export 'src/env.dart';";
    } else {
      return "export 'src/env.$suffix.dart';";
    }
  }

  /// Generates environment class content
  static String generateEnvClassContent(
    String envFileName,
    String envClassName,
    File envFile,
  ) {
    final suffix = NamingUtils.getEnvironmentSuffix(envFileName);
    final envFileRelative = p.basename(envFileName);
    final privateClassName = '_$envClassName';
    final className = NamingUtils.capitalizeFirst(suffix);
    final Map<String, String> envFileContent = EnvFileParser.parseEnvFile(
      envFile,
    );
    final partOf = _generatePartStatement(suffix);

    final fields = envFileContent.keys
        .map((k) {
          final keyName = NamingUtils.toCamelCase(k);
          final comment = NamingUtils.generateCommentFromKey(k);

          return '''
/// $comment
@EnviedField(varName: '$k', obfuscate: true)
static final String $keyName = $privateClassName.$keyName;
''';
        })
        .join('\n');

    return '''
import 'package:envied/envied.dart';

$partOf

@Envied(path: '$envFileRelative', obfuscate: true)
abstract class Env$className {
  $fields
}
''';
  }

  /// Generates enum class content for environment variables
  static String generateEnumClassContent(File file) {
    final Map<String, String> envFileContent = EnvFileParser.parseEnvFile(file);

    final fields = envFileContent.keys
        .map((key) {
          final keyName = NamingUtils.toCamelCase(key);
          final comment = NamingUtils.generateCommentFromKey(key);

          return '''
  /// $comment
  $keyName('$key'),
''';
        })
        .join('\n')
        .replaceFirst(RegExp(r',\s*$'), '');

    return '''
/// {@template env}
/// A Very Good Package generated by Env Builder CLI.
/// {@endtemplate}
enum Env {

  $fields;

  /// {@macro env}
  const Env(this.name);

  /// The value of the enum class
  final String name;
}

/// Env value signature that can be used to get an environment value, base
/// on provided [Env].
typedef EnvValue = String Function(Env env);
''';
  }

  /// Generates app flavor content
  static String generateAppFlavorContent(List<String> paths) {
    final flavors = paths.map((path) => NamingUtils.getFlavor(path)).join(', ');
    final envContents = EnvFileParser.parseEnvFile(File(paths.first));

    final getEnvContent = envContents.keys
        .map((key) {
          final keyName = NamingUtils.toCamelCase(key);
          final fields = flavors
              .split(', ')
              .map((e) {
                final className = NamingUtils.getEnvironmentClassName(e);
                return '''
  Flavor.$e => $className.$keyName,
''';
              })
              .join('\n');

          return '''
  Env.$keyName => switch(flavor){
  $fields
},
''';
        })
        .join('\n');

    final factories = flavors
        .split(', ')
        .map((flavor) {
          return '''
factory AppFlavor.$flavor() => const AppFlavor._(flavor: Flavor.$flavor);
''';
        })
        .join('\n');

    return '''
import 'package:env/env.dart';

enum Flavor { $flavors }

sealed class AppEnv {
  const AppEnv();

  String getEnv(Env env);
}

class AppFlavor extends AppEnv {
  $factories

  const AppFlavor._({required this.flavor});

  final Flavor flavor;

  @override
  String getEnv(Env env) => switch(env){
    $getEnvContent
  };
}
''';
  }

  /// Generates test file content
  static String generateTestFileContent() {
    return '''
import 'package:flutter_test/flutter_test.dart';

void main() {
  group('Env', () {
    test('can be instantiated', () {
    });
  });
}
''';
  }
}
