// ignore_for_file: avoid_print

import '../core/core.dart';
import 'cli_config.dart';
import 'directory_manager.dart';
import 'package:path/path.dart' as p;
import 'package:env_builder_cli/env_builder_cli.dart' as env_builder_cli;

/// Handles Dart file generation
///
/// Generates all Dart source files for the environment package, including:
/// - Environment-specific classes with obfuscated field access
/// - Enum definitions for environment variable keys
/// - Library export files for clean imports
/// - Application flavor classes for runtime configuration switching
class DartFileGenerator {
  final env_builder_cli.EnvBuilder envBuilder;

  DartFileGenerator(this.envBuilder);

  /// Generates all Dart environment files
  Future<void> generateEnvDartFiles(
    List<String> envFilePaths,
    Directory srcDir,
  ) async {
    for (final envFilePath in envFilePaths) {
      await _generateSingleEnvDartFile(envFilePath, srcDir);
    }
  }

  Future<void> _generateSingleEnvDartFile(
    String envFilePath,
    Directory srcDir,
  ) async {
    final fileName = p.basename(envFilePath);
    final envDartFileName = envBuilder.generateEnvDartFileName(fileName);
    final envDartFilePath = p.join(srcDir.path, envDartFileName);
    final envDartFile = File(envDartFilePath);

    final envClassName = envBuilder.generateEnvClassName(fileName);
    final envFile = File(envFilePath);
    final envContent = envBuilder.generateEnvClassContent(
      fileName,
      envClassName,
      envFile,
    );

    try {
      envDartFile.writeAsStringSync(envContent);
      print('Generated $envDartFilePath');
    } catch (e) {
      throw FileSystemException(
        'Error writing Dart env file $envDartFilePath: $e',
      );
    }
  }

  /// Generates the enums.dart file
  void generateEnumsFile(String firstEnvFilePath, Directory srcDir) {
    final enumsFilePath = p.join(srcDir.path, 'enums.dart');
    final enumsFile = File(enumsFilePath);
    final enumContent = envBuilder.generateEnumClassContent(
      File(firstEnvFilePath),
    );

    try {
      enumsFile.writeAsStringSync(enumContent);
      print('Generated $enumsFilePath');
    } catch (e) {
      throw FileSystemException('Error writing enums.dart file: $e');
    }
  }

  /// Generates the main library export file
  void generateLibraryExportFile(
    List<String> envFilePaths,
    Directory envPackageDir,
  ) {
    final libDir = Directory(
      p.join(envPackageDir.path, CliConfig.libFolderName),
    );
    final envExportFilePath = p.join(libDir.path, 'env.dart');
    final envExportFile = File(envExportFilePath);

    final exports = _buildExportContent(envFilePaths);

    try {
      envExportFile.writeAsStringSync(exports);
      print('Generated ${envExportFile.path}');
    } catch (e) {
      throw FileSystemException('Error writing env.dart export file: $e');
    }
  }

  String _buildExportContent(List<String> envFilePaths) {
    final envExports = envFilePaths
        .map((filePath) {
          final suffix = envBuilder.envDartFileSuffix(p.basename(filePath));
          return envBuilder.fileExporter(suffix);
        })
        .join('\n');

    return '''
/// A very good package generated by Env Builder CLI for environment variables
library;

export 'src/config/app_flavor.dart';
export 'src/enums.dart';
$envExports
''';
  }

  /// Generates the app flavor configuration file
  void generateAppFlavorFile(List<String> envFilePaths, Directory srcDir) {
    final configDirPath = p.join(srcDir.path, CliConfig.configFolderName);
    final configDir = Directory(configDirPath);
    final appFlavorFilePath = p.join(configDir.path, 'app_flavor.dart');
    final appFlavorFile = File(appFlavorFilePath);

    final appFlavorContent = envBuilder.generateAppFlavorContent(envFilePaths);

    try {
      DirectoryManager.ensureDirectoryExists(configDir.path);
      appFlavorFile.writeAsStringSync(appFlavorContent);
      print('Generated ${appFlavorFile.path}');
    } catch (e) {
      throw FileSystemException('Error writing app_flavor.dart file: $e');
    }
  }
}
